import streamlit as st
import requests
import json
from typing import Dict, Any
import os
from datetime import datetime

# Service URLs from environment variables
RAG_SERVICE_URL = os.getenv("RAG_SERVICE_URL", "http://localhost:8001")
LLM_SERVICE_URL = os.getenv("LLM_SERVICE_URL", "http://localhost:8003")
MEDICAL_DOC_SERVICE_URL = os.getenv("MEDICAL_DOC_SERVICE_URL", "http://localhost:8000")
AUDIO_TRANSCRIPTION_SERVICE_URL = os.getenv("AUDIO_TRANSCRIPTION_SERVICE_URL", "http://localhost:8004")

# Configure the page
st.set_page_config(
    page_title="–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è RAG –°–∏—Å—Ç–µ–º–∞",
    page_icon="üè•",
    layout="wide"
)

def add_document(content: str, metadata: Dict[str, Any]) -> bool:
    """Add a document to the RAG service"""
    try:
        response = requests.post(
            f"{RAG_SERVICE_URL}/documents",
            json={"content": content, "metadata": metadata}
        )
        response.raise_for_status()
        return True
    except Exception as e:
        st.error(f"Error adding document: {str(e)}")
        return False

def get_documents():
    """Fetch all documents from the RAG service"""
    try:
        response = requests.get(f"{RAG_SERVICE_URL}/documents")
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"Error fetching documents: {str(e)}")
        return []

def delete_document(doc_id: str) -> bool:
    """Delete a document from the RAG service"""
    try:
        response = requests.delete(f"{RAG_SERVICE_URL}/documents/{doc_id}")
        response.raise_for_status()
        return True
    except Exception as e:
        st.error(f"Error deleting document: {str(e)}")
        return False

def search_documents(query: str, top_k: int = 3):
    """Search for similar documents"""
    try:
        response = requests.post(
            f"{RAG_SERVICE_URL}/search",
            json={"query": query, "top_k": top_k}
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"Error searching documents: {str(e)}")
        return []

# Functions for LLM service
def get_available_models():
    """Get available LLM models"""
    try:
        response = requests.get(f"{LLM_SERVICE_URL}/available_models")
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"Error fetching available models: {str(e)}")
        return {}

def generate_llm_response(prompt: str, model_type: str, parameters: Dict[str, Any] = None):
    """Generate response from LLM"""
    try:
        response = requests.post(
            f"{LLM_SERVICE_URL}/generate",
            json={
                "prompt": prompt,
                "model_type": model_type,
                "parameters": parameters
            }
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"Error generating response: {str(e)}")
        return None

def analyze_medical_doc(medical_doc: str, model_type: str = "openai", top_k: int = 3, parameters: Dict[str, Any] = None):
    """Analyze medical document using the medical doc service with streaming support"""
    try:
        with requests.post(
            f"{MEDICAL_DOC_SERVICE_URL}/analyze",
            json={
                "medical_doc": medical_doc,
                "model_type": model_type,
                "top_k": top_k,
                "parameters": parameters
            },
            stream=True,
            timeout=360  # 6 minutes timeout
        ) as response:
            response.raise_for_status()
            
            # Create placeholders for status messages and results
            status_placeholder = st.empty()
            result_container = st.container()
            
            for line in response.iter_lines():
                if line:
                    try:
                        data = json.loads(line.decode('utf-8'))
                        status = data.get("status")
                        
                        if status in ["started", "searching", "preparing", "generating"]:
                            # Update status message with spinner
                            with status_placeholder:
                                with st.spinner(data["message"]):
                                    st.info(data["message"])
                        elif status == "completed":
                            # Clear status message and return results
                            status_placeholder.empty()
                            return data
                        elif status == "error":
                            # Show error message and stop processing
                            status_placeholder.error(data["message"])
                            return None
                    except json.JSONDecodeError as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
                        return None
            
            return None
    except requests.Timeout:
        st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return None
    except requests.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
        return None

# Audio transcription functions
def get_available_audio_models():
    """Get available audio transcription models"""
    try:
        response = requests.get(f"{AUDIO_TRANSCRIPTION_SERVICE_URL}/models")
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"Error fetching available audio models: {str(e)}")
        return {}

def transcribe_audio(audio_file, model_type="rnnt", long_form=False):
    """Transcribe audio file using the audio transcription service"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        files = {"file": (audio_file.name, audio_file, audio_file.type)}
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        st.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {audio_file.name} ({audio_file.type})")
        st.info(f"–ú–æ–¥–µ–ª—å: {model_type}, –î–ª–∏–Ω–Ω–æ–µ –∞—É–¥–∏–æ: {long_form}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            f"{AUDIO_TRANSCRIPTION_SERVICE_URL}/transcribe",
            files=files,
            data={
                "model_type": model_type, 
                "long_form": "true" if long_form else "false"
            },
            timeout=300  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 5 –º–∏–Ω—É—Ç –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∞—É–¥–∏–æ
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code != 200:
            st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            error_text = response.text
            try:
                error_json = response.json()
                if "error" in error_json:
                    error_text = error_json["error"]
            except:
                pass
            st.error(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")
            return None
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º—ã –ø–æ–ª—É—á–∏–ª–∏
        if long_form and "transcription" in result:
            st.warning("–î–ª–∏–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –æ–±—ã—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è")
        
        return result
    except requests.exceptions.Timeout:
        st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ê—É–¥–∏–æ—Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º.")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ: {str(e)}")
        return None

def test_audio_service():
    """Test if the audio transcription service is responsive"""
    try:
        response = requests.get(f"{AUDIO_TRANSCRIPTION_SERVICE_URL}/test")
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"Error testing audio service: {str(e)}")
        return None

# Main UI
st.title("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è RAG –°–∏—Å—Ç–µ–º–∞")

# Tabs for different functionalities
tab1, tab2, tab3 = st.tabs(["–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", "–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ"])

# RAG System Tab
with tab1:
    st.header("–ë–∞–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π")
    
    # Create three columns for the main layout
    doc_col, list_col, search_col = st.columns([1, 1, 1])
    
    # Document Creation Column
    with doc_col:
        st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
        doc_content = st.text_area("–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞", height=150)
        
        # Separate inputs for metadata
        st.subheader("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        # Date input
        doc_date = st.date_input("–î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", datetime.now())
        
        # Medical specialty selection
        specialties = [
            "–¢–µ—Ä–∞–ø–∏—è", "–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è", "–ù–µ–≤—Ä–æ–ª–æ–≥–∏—è", "–•–∏—Ä—É—Ä–≥–∏—è", 
            "–ü–µ–¥–∏–∞—Ç—Ä–∏—è", "–û–Ω–∫–æ–ª–æ–≥–∏—è", "–ì–∏–Ω–µ–∫–æ–ª–æ–≥–∏—è", "–£—Ä–æ–ª–æ–≥–∏—è",
            "–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∏—è", "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∏—è", "–ü—Å–∏—Ö–∏–∞—Ç—Ä–∏—è", "–î—Ä—É–≥–æ–µ"
        ]
        specialty = st.selectbox("–û–±–ª–∞—Å—Ç—å –º–µ–¥–∏—Ü–∏–Ω—ã", specialties)
        
        # Document type selection
        doc_types = [
            "–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–π —Å–ª—É—á–∞–π", "–ü—Ä–æ—Ç–æ–∫–æ–ª –ª–µ—á–µ–Ω–∏—è", 
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", "–î—Ä—É–≥–æ–µ"
        ]
        doc_type = st.selectbox("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞", doc_types)
        
        # Multi-select for diagnoses
        diagnoses = st.text_area(
            "–î–∏–∞–≥–Ω–æ–∑—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
            height=100,
            help="–í–≤–µ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–∏–∞–≥–Ω–æ–∑ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"
        )
        
        # Custom tags
        tags = st.text_area(
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
            height=100,
            help="–í–≤–µ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π —Ç–µ–≥ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"
        )
        
        if st.button("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"):
            try:
                # Process inputs
                diagnoses_list = [d.strip() for d in diagnoses.split('\n') if d.strip()]
                tags_list = [t.strip() for t in tags.split('\n') if t.strip()]
                
                metadata = {
                    "type": doc_type,
                    "specialty": specialty,
                    "date": doc_date.strftime("%Y-%m-%d"),
                    "diagnoses": diagnoses_list,
                    "tags": tags_list
                }
                
                if doc_content and add_document(doc_content, metadata):
                    st.success("–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    st.rerun()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")

    # Document List Column
    with list_col:
        st.subheader("–ë–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        documents = get_documents()
        
        for doc in documents:
            with st.expander(f"–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç {doc['metadata'].get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}", expanded=False):
                st.text_area("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", doc['content'], height=100, disabled=True, key=f"content_{doc['id']}")
                
                # Display metadata in a more readable format
                st.markdown("**–û–±–ª–∞—Å—Ç—å –º–µ–¥–∏—Ü–∏–Ω—ã:** " + doc['metadata'].get('specialty', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                st.markdown("**–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:** " + doc['metadata'].get('type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                
                if doc['metadata'].get('diagnoses'):
                    st.markdown("**–î–∏–∞–≥–Ω–æ–∑—ã:**")
                    for d in doc['metadata']['diagnoses']:
                        st.markdown(f"- {d}")
                
                if doc['metadata'].get('tags'):
                    st.markdown("**–¢–µ–≥–∏:**")
                    for t in doc['metadata']['tags']:
                        st.markdown(f"- {t}")
                
                if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_{doc['id']}"):
                    if delete_document(doc['id']):
                        st.success("–î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω!")
                        st.rerun()

    # Search Column
    with search_col:
        st.subheader("–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫")
        search_query = st.text_area("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", height=100, key="search_query")
        top_k = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", min_value=1, max_value=10, value=3)
        
        if st.button("–ü–æ–∏—Å–∫"):
            if search_query:
                results = search_documents(search_query, top_k)
                
                if results:
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
                    for idx, doc in enumerate(results, 1):
                        with st.expander(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {idx} (–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {doc['similarity']:.3f})", expanded=True):
                            st.text_area("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", doc['content'], height=100, disabled=True, key=f"result_{idx}")
                            
                            # Display metadata in a more readable format
                            st.markdown("**–û–±–ª–∞—Å—Ç—å –º–µ–¥–∏—Ü–∏–Ω—ã:** " + doc['metadata'].get('specialty', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                            st.markdown("**–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:** " + doc['metadata'].get('type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                            
                            if doc['metadata'].get('diagnoses'):
                                st.markdown("**–î–∏–∞–≥–Ω–æ–∑—ã:**")
                                for d in doc['metadata']['diagnoses']:
                                    st.markdown(f"- {d}")
                            
                            if doc['metadata'].get('tags'):
                                st.markdown("**–¢–µ–≥–∏:**")
                                for t in doc['metadata']['tags']:
                                    st.markdown(f"- {t}")
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")

# # LLM Chat Tab
# with tab2:
#     st.header("–ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
    
#     # Get available models
#     available_models = get_available_models()
    
#     # Model selection
#     model_type = st.selectbox(
#         "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò",
#         options=list(available_models.keys()) if available_models else ["openai", "local"],
#         help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"
#     )
    
#     # Chat interface
#     if "messages" not in st.session_state:
#         st.session_state.messages = []

#     # Display chat history
#     for message in st.session_state.messages:
#         with st.chat_message(message["role"]):
#             st.markdown(message["content"])

#     # Chat input
#     if prompt := st.chat_input("–°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è —á—Ç–æ-–Ω–∏–±—É–¥—å"):
#         st.session_state.messages.append({"role": "user", "content": prompt})
#         with st.chat_message("user"):
#             st.markdown(prompt)

#         # Generate response
#         with st.chat_message("assistant"):
#             st.markdown(generate_llm_response(prompt, model_type))

# Medical Analysis Tab
with tab2:
    st.header("–ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # Get available models for selection
    available_models = get_available_models()
    
    # Input area
    col1, col2 = st.columns([3, 1])
    
    with col1:
        medical_doc = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç",
            height=300,
            help="–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )
    
    with col2:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
        model_type = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò",
            options=list(available_models.keys()) if available_models else ["openai", "local"],
            help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )
        
        top_k = st.slider(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª—É—á–∞–µ–≤",
            min_value=1,
            max_value=10,
            value=3,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )
        
        analyze_button = st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
    
    # Analysis results
    if analyze_button and medical_doc:
        result = analyze_medical_doc(medical_doc, model_type, top_k)
        
        if result:
            # Display recommendations
            st.subheader("–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            st.markdown(result["recommendations"])
            
            # Display similar cases
            st.subheader("–ü–æ—Ö–æ–∂–∏–µ —Å–ª—É—á–∞–∏")
            for idx, doc in enumerate(result["similar_documents"], 1):
                with st.expander(f"–°–ª—É—á–∞–π {idx} (–°—Ö–æ–∂–µ—Å—Ç—å: {doc['similarity']:.3f})", expanded=False):
                    st.text_area("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", doc['content'], height=100, disabled=True)
                    if "metadata" in doc:
                        # Display metadata in a more readable format
                        st.markdown("**–û–±–ª–∞—Å—Ç—å –º–µ–¥–∏—Ü–∏–Ω—ã:** " + doc['metadata'].get('specialty', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                        st.markdown("**–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:** " + doc['metadata'].get('type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                        
                        if doc['metadata'].get('diagnoses'):
                            st.markdown("**–î–∏–∞–≥–Ω–æ–∑—ã:**")
                            for d in doc['metadata']['diagnoses']:
                                st.markdown(f"- {d}")
                        
                        if doc['metadata'].get('tags'):
                            st.markdown("**–¢–µ–≥–∏:**")
                            for t in doc['metadata']['tags']:
                                st.markdown(f"- {t}")
            
            # Show model information
            with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"):
                st.json(result["model_info"])
    
    elif analyze_button:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

# Audio Transcription Tab
with tab3:
    st.header("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ")
    
    # Get available models
    audio_models = get_available_audio_models()
    
    # Check service status
    service_col, model_col = st.columns([1, 1])
    with service_col:
        if st.button("‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"):
            test_result = test_audio_service()
            if test_result:
                st.success(f"‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω! –°—Ç–∞—Ç—É—Å: {test_result['status']}")
                st.write("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:", test_result["models"])
            else:
                st.error("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
    
    # Two columns layout: upload and settings on the left, results on the right
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª")
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª", type=['mp3', 'wav', 'ogg', 'm4a'])
        
        # Model selection
        model_options = {}
        if audio_models:
            if audio_models.get("ctc", False):
                model_options["GigaAM CTC (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ)"] = "ctc"
            if audio_models.get("rnnt", False):
                model_options["GigaAM RNNT (–ª—É—á—à–∞—è –º–æ–¥–µ–ª—å)"] = "rnnt"
        
        if not model_options:
            model_options = {"GigaAM RNNT (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)": "rnnt", "GigaAM CTC (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)": "ctc"}
        
        selected_model_name = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏", 
            options=list(model_options.keys()),
            index=0 if "GigaAM RNNT (–ª—É—á—à–∞—è –º–æ–¥–µ–ª—å)" in model_options else 0
        )
        selected_model = model_options[selected_model_name]
        
        # Display model information
        st.info("""
        **–û –º–æ–¥–µ–ª—è—Ö:**
        - **RNNT**: –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º WER
        - **CTC**: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Å –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç–æ–π
        
        –û–±–µ –º–æ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ GigaAM-v2 —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–µ –æ—Ç Salute Developers.
        """)
        
        # Long-form option
        use_long_form = st.checkbox(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –¥–ª–∏–Ω–Ω—ã—Ö –∞—É–¥–∏–æ",
            value=False,
            help="–í–∫–ª—é—á–∏—Ç–µ –¥–ª—è –∞—É–¥–∏–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥"
        )
        
        if use_long_form:
            st.warning("""
            –î–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö –∞—É–¥–∏–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Voice Activity Detection –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∞—É–¥–∏–æ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã.
            –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞.
            """)
        
        # Transcribe button - give it a unique key to avoid conflicts
        transcribe_button = st.button("üéôÔ∏è –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ", key="transcribe_audio_btn")
    
    with col2:
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏")
        
        if uploaded_file is not None and transcribe_button:
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ..."):
                # Call the transcription service
                result = transcribe_audio(
                    uploaded_file,
                    model_type=selected_model,
                    long_form=use_long_form
                )
                
                if result:
                    st.success("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    
                    # Display results based on the type (long-form or regular)
                    if "utterances" in result:  # Long-form result
                        st.markdown("### –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
                        
                        for i, utterance in enumerate(result["utterances"]):
                            start_time = utterance["boundaries"][0]
                            end_time = utterance["boundaries"][1]
                            
                            # Format times as MM:SS
                            start_formatted = f"{int(start_time // 60):02d}:{int(start_time % 60):02d}"
                            end_formatted = f"{int(end_time // 60):02d}:{int(end_time % 60):02d}"
                            
                            # Display segment with time markers
                            st.markdown(f"**[{start_formatted} - {end_formatted}]** {utterance['transcription']}")
                    else:  # Regular transcription
                        st.markdown("### –¢–µ–∫—Å—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏")
                        st.markdown(result["transcription"])
                    
                    # Add copy button for the transcription
                    if "utterances" in result:
                        full_text = "\n".join([u["transcription"] for u in result["utterances"]])
                    else:
                        full_text = result["transcription"]
                    
                    st.text_area("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", full_text, height=150)
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –∞—É–¥–∏–æ.")
            
            # Sample display
            st.markdown("### –ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏")
            st.markdown("""
            **[00:00 - 00:05]** –î–æ–±—Ä—ã–π –¥–µ–Ω—å, —Å–µ–≥–æ–¥–Ω—è –º—ã –æ–±—Å—É–¥–∏–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ª–µ—á–µ–Ω–∏—è.
            
            **[00:06 - 00:12]** –î–∞–Ω–Ω–∞—è –º–µ—Ç–æ–¥–∏–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞ –≤—ã—Å–æ–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏—è—Ö.
            
            **[00:13 - 00:20]** –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—ã–ø—É—Å–∫–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞.
            """) 