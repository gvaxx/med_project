import streamlit as st
import requests
import json
import os
from datetime import datetime
import tempfile
from moviepy import VideoFileClip
from pydub import AudioSegment
import io
import base64
from docx import Document
from weasyprint import HTML, CSS
from weasyprint.text.fonts import FontConfiguration
import markdown
import re
from bs4 import BeautifulSoup

# Service URLs from environment variables
MEDICAL_DOC_SERVICE_URL = os.getenv("MEDICAL_DOC_SERVICE_URL", "http://medical-doc-service:8000")
AUDIO_TRANSCRIPTION_SERVICE_URL = os.getenv("AUDIO_TRANSCRIPTION_SERVICE_URL", "http://audio-transcription-service:8004")
LLM_SERVICE_URL = os.getenv("LLM_SERVICE_URL", "http://llm-service:8003")

# Configure the page
st.set_page_config(
    page_title="–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
    page_icon="üè•",
    layout="wide"
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
st.markdown("""
<style>
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    h1, h2, h3, h4 {
        color: #2c3e50;
    }
    h1 {
        border-bottom: 2px solid #3498db;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }
    .stTextArea > div > div > textarea {
        border-radius: 8px;
        border-color: #e0e0e0;
    }
    .stTextArea > label {
        font-weight: bold;
        color: #2c3e50;
    }
    .stAlert {
        border-radius: 8px;
    }
    div[data-testid="stExpander"] {
        border-radius: 8px;
        border: 1px solid #e0e0e0;
    }
</style>
""", unsafe_allow_html=True)

def get_available_models():
    """Get available LLM models"""
    try:
        response = requests.get(f"{LLM_SERVICE_URL}/available_models")
        if response.status_code == 200:
            return response.json()
    except Exception:
        pass
    return {"gpt-3.5-turbo": True, "gpt-4": True}  # Default models if service unreachable

# Get available LLM models
available_models = get_available_models()

def extract_audio_from_video(video_file):
    """Extract audio from video file"""
    try:
        # Create a temporary file to save the video
        with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_video:
            temp_video.write(video_file.read())
            temp_video_path = temp_video.name

        # Extract audio using moviepy
        video = VideoFileClip(temp_video_path)
        
        # Create a temporary file for the audio
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_audio:
            video.audio.write_audiofile(temp_audio.name)
            audio_segment = AudioSegment.from_wav(temp_audio.name)
            
        # Cleanup temporary files
        os.unlink(temp_video_path)
        os.unlink(temp_audio.name)
        video.close()
        
        return audio_segment
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ: {str(e)}")
        return None

def load_audio_file(audio_file):
    """Load audio file into AudioSegment"""
    try:
        # Read the uploaded file into memory
        audio_bytes = audio_file.read()
        
        # Create a temporary file with the correct extension
        ext = audio_file.name.split('.')[-1].lower()
        with tempfile.NamedTemporaryFile(suffix=f'.{ext}', delete=False) as temp_audio:
            temp_audio.write(audio_bytes)
            audio_segment = AudioSegment.from_file(temp_audio.name, format=ext)
            os.unlink(temp_audio.name)
        return audio_segment
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def combine_audio_segments(audio_segments):
    """Combine multiple audio segments into one"""
    try:
        combined = AudioSegment.empty()
        for segment in audio_segments:
            combined += segment
        return combined
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤: {str(e)}")
        return None

def audio_segment_to_file(audio_segment):
    """Convert AudioSegment to file-like object"""
    try:
        buffer = io.BytesIO()
        audio_segment.export(buffer, format="wav")
        buffer.seek(0)
        return buffer
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
        return None 

def check_services():
    """Check if all required services are available"""
    services_status = {}
    
    # Check audio transcription service
    try:
        response = requests.get(f"{AUDIO_TRANSCRIPTION_SERVICE_URL}/test", timeout=5)
        if response.status_code == 200:
            result = response.json()
            services_status["audio"] = {
                "status": "available",
                "models": result.get("models", {})
            }
        else:
            services_status["audio"] = {"status": "error", "message": response.text}
    except Exception as e:
        services_status["audio"] = {"status": "error", "message": str(e)}
    
    # Check medical doc service
    try:
        response = requests.get(f"{MEDICAL_DOC_SERVICE_URL}/health", timeout=5)
        if response.status_code == 200:
            services_status["medical"] = {"status": "available"}
        else:
            services_status["medical"] = {"status": "error", "message": response.text}
    except Exception as e:
        services_status["medical"] = {"status": "error", "message": str(e)}
    
    return services_status

def transcribe_audio(audio_file):
    """Transcribe audio file using the transcription service"""
    try:
        files = {"file": (audio_file.name, audio_file, audio_file.type)}
        data = {
            "model_type": "rnnt",  # –∏—Å–ø–æ–ª—å–∑—É–µ–º RNNT –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "long_form": "true"    # –≤–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª–∏–Ω–Ω—ã—Ö –∞—É–¥–∏–æ
        }
        
        st.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {audio_file.name} ({audio_file.type})")
        
        response = requests.post(
            f"{AUDIO_TRANSCRIPTION_SERVICE_URL}/transcribe",
            files=files,
            data=data,
            timeout=600  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 10 –º–∏–Ω—É—Ç –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∞—É–¥–∏–æ
        )
        
        if response.status_code == 200:
            result = response.json()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
            if "utterances" in result:
                # –î–ª—è –¥–ª–∏–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                return "\n".join([u["transcription"] for u in result["utterances"]])
            elif "transcription" in result:
                # –î–ª—è –æ–±—ã—á–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                return result["transcription"]
            else:
                st.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
                return None
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {response.text}")
            return None
    except requests.exceptions.Timeout:
        st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ê—É–¥–∏–æ—Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º.")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}")
        return None

def process_transcript(text, selected_model):
    """Process transcript into medical documentation"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        status_container = st.empty()
        
        response = requests.post(
            f"{MEDICAL_DOC_SERVICE_URL}/process_transcript",
            json={
                "transcript": text,
                "model_type": selected_model,
                "parameters": {
                    "temperature": 0.3,
                    "max_tokens": 8000
                }
            },
            stream=True,
            timeout=600  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        )
        
        if response.status_code == 200:
            for line in response.iter_lines():
                if line:
                    data = json.loads(line.decode('utf-8'))
                    status = data.get("status")
                    
                    if status == "completed":
                        status_container.empty()
                        return data.get("structured_doc")
                    elif status == "error":
                        st.error(data.get("message"))
                        return None
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        with status_container:
                            st.info(data.get("message"))
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {str(e)}")
        return None

def analyze_medical_doc(medical_doc, selected_model):
    """Analyze medical documentation and generate recommendations"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        status_container = st.empty()
        
        response = requests.post(
            f"{MEDICAL_DOC_SERVICE_URL}/analyze",
            json={
                "medical_doc": medical_doc,
                "model_type": selected_model,
                "top_k": 3,
                "parameters": {
                    "temperature": 0.3,
                    "max_tokens": 8000
                }
            },
            stream=True,
            timeout=600  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        )
        
        if response.status_code == 200:
            for line in response.iter_lines():
                if line:
                    data = json.loads(line.decode('utf-8'))
                    status = data.get("status")
                    
                    if status == "completed":
                        status_container.empty()
                        return {
                            "recommendations": data.get("recommendations"),
                            "similar_documents": data.get("similar_documents")
                        }
                    elif status == "error":
                        st.error(data.get("message"))
                        return None
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        with status_container:
                            st.info(data.get("message"))
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
        return None

def create_pdf(medical_doc, recommendations=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WeasyPrint —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Markdown –≤ HTML
        medical_doc_html = markdown.markdown(medical_doc)
        recommendations_html = markdown.markdown(recommendations) if recommendations else ""
        
        # –°–æ–∑–¥–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —á–∞—Å—Ç—è–º
        html_header = """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</title>
            <style>
                @page {
                    size: A4;
                    margin: 2cm;
                }
                body {
                    font-family: 'DejaVu Sans', sans-serif;
                    font-size: 12pt;
                }
                h1 {
                    font-size: 18pt;
                    text-align: center;
                    margin-bottom: 20px;
                }
                h2 {
                    font-size: 16pt;
                    margin-top: 30px;
                    margin-bottom: 15px;
                }
                h3 {
                    font-size: 14pt;
                    margin-top: 20px;
                    margin-bottom: 10px;
                }
                p {
                    margin-bottom: 10px;
                }
                ul, ol {
                    margin-left: 20px;
                    margin-bottom: 10px;
                }
                li {
                    margin-bottom: 5px;
                }
                a {
                    color: #0066cc;
                    text-decoration: none;
                }
                blockquote {
                    border-left: 3px solid #ccc;
                    margin-left: 0;
                    padding-left: 15px;
                    color: #555;
                }
                code {
                    font-family: monospace;
                    background-color: #f5f5f5;
                    padding: 2px 4px;
                    border-radius: 3px;
                }
                .page-break {
                    page-break-after: always;
                }
                footer {
                    position: fixed;
                    bottom: 0;
                    width: 100%;
                    text-align: center;
                    font-size: 9pt;
                }
            </style>
        </head>
        <body>
            <h1>–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</h1>
            <div>
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        doc_content = medical_doc_html
        
        # –ß–∞—Å—Ç—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        recommendations_content = ""
        if recommendations:
            recommendations_content = """
            <div class="page-break"></div>
            <h1>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h1>
            <div>
            """ + recommendations_html + """
            </div>
            """
        
        # –ß–∞—Å—Ç—å —Å —Ñ—É—Ç–µ—Ä–æ–º
        current_date = datetime.now().strftime("%d.%m.%Y %H:%M")
        footer_html = f"""
            </div>
            <footer>
                <p>–î–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω {current_date}</p>
            </footer>
        </body>
        </html>
        """
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å HTML –≤–º–µ—Å—Ç–µ
        html_content = html_header + doc_content + recommendations_content + footer_html
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤
        font_config = FontConfiguration()
        
        # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML –≤ PDF
        pdf_buffer = io.BytesIO()
        HTML(string=html_content).write_pdf(
            pdf_buffer,
            font_config=font_config,
            stylesheets=[
                CSS(string='@page { size: A4; margin: 2cm; }')
            ]
        )
        
        pdf_buffer.seek(0)
        return pdf_buffer.read()
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}")
        return None

def create_docx(medical_doc, recommendations=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown"""
    try:
        doc = Document()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        doc.add_heading('–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', 0)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown –≤ HTML –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        html_content = markdown.markdown(medical_doc)
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        def process_element(element, parent):
            if element.name is None:  # –¢–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª
                if element.string and element.string.strip():
                    parent.add_paragraph(element.string)
                return
                
            if element.name == 'h1':
                parent.add_heading(element.text, 1)
            elif element.name == 'h2':
                parent.add_heading(element.text, 2)
            elif element.name == 'h3':
                parent.add_heading(element.text, 3)
            elif element.name == 'p':
                p = parent.add_paragraph()
                for child in element.children:
                    if child.name == 'strong' or child.name == 'b':
                        p.add_run(child.text).bold = True
                    elif child.name == 'em' or child.name == 'i':
                        p.add_run(child.text).italic = True
                    elif child.name == 'code':
                        p.add_run(child.text).font.name = 'Courier New'
                    elif child.name is None:  # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                        p.add_run(child.string)
            elif element.name == 'ul':
                for li in element.find_all('li', recursive=False):
                    p = parent.add_paragraph(style='List Bullet')
                    p.add_run(li.text)
            elif element.name == 'ol':
                for idx, li in enumerate(element.find_all('li', recursive=False), 1):
                    p = parent.add_paragraph(style='List Number')
                    p.add_run(li.text)
            elif element.name == 'blockquote':
                p = parent.add_paragraph(style='Quote')
                p.add_run(element.text)
            else:  # –î–ª—è –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–µ–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
                for child in element.children:
                    process_element(child, parent)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ HTML –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–≥ body, –∏ –µ—Å–ª–∏ –Ω–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
        if soup.body:
            elements_to_process = list(soup.body.children)
        else:
            elements_to_process = list(soup.children)
            
        for element in elements_to_process:
            process_element(element, doc)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if recommendations:
            # –†–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            doc.add_page_break()
            doc.add_heading('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', 0)
            
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            html_recs = markdown.markdown(recommendations)
            soup_recs = BeautifulSoup(html_recs, 'html.parser')
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Ç–∞–∫–∞—è –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            if soup_recs.body:
                rec_elements = list(soup_recs.body.children)
            else:
                rec_elements = list(soup_recs.children)
                
            for element in rec_elements:
                process_element(element, doc)
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å DOCX
        docx_bytes = io.BytesIO()
        doc.save(docx_bytes)
        docx_bytes.seek(0)
        return docx_bytes.getvalue()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DOCX: {str(e)}")
        return None

# Initialize session state
if "transcription" not in st.session_state:
    st.session_state.transcription = None
if "medical_doc" not in st.session_state:
    st.session_state.medical_doc = None
if "recommendations" not in st.session_state:
    st.session_state.recommendations = None
if "similar_documents" not in st.session_state:
    st.session_state.similar_documents = None
if "doc_edited" not in st.session_state:
    st.session_state.doc_edited = False
if "generate_doc" not in st.session_state:
    st.session_state.generate_doc = False
if "generate_rec" not in st.session_state:
    st.session_state.generate_rec = False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–æ–≤ –≤ session_state –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ callback
def set_generate_doc():
    st.session_state.generate_doc = True

def set_generate_rec():
    st.session_state.generate_rec = True

# Main UI
st.title("üè• –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")

# –ë–∞–∑–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ HTML
st.markdown("""
### –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –ø—Ä–∏–µ–º–∞
2. –ü–æ–ª—É—á–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
3. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
4. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
5. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
""")

# File upload section
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã",
    type=['mp3', 'wav', 'm4a', 'mp4', 'avi', 'mov'],
)

# Process files and generate documentation
if uploaded_file:
    if st.button("üéØ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"):
        with st.spinner("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ..."):
            transcription = transcribe_audio(uploaded_file)
            if transcription:
                st.session_state.transcription = transcription
                st.rerun()

# Display transcription and model selection for document generation
if st.session_state.transcription:
    st.header("2. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è")
    st.text_area(
        "–¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏",
        st.session_state.transcription,
        height=200,
        disabled=True
    )
    
    # Add model selection and document generation button
    st.header("3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ –ª–∏—à–Ω–∏—Ö HTML-–≤—Å—Ç–∞–≤–æ–∫
    doc_gen_model = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
        options=list(available_models.keys()),
        key="doc_model_select"
    )
    st.button("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", 
                key="generate_doc_button", 
                on_click=set_generate_doc)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Ñ–ª–∞–≥–µ
    if st.session_state.generate_doc:
        doc_gen_placeholder = st.empty()
        with doc_gen_placeholder.container():
            with st.spinner("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."):
                medical_doc = process_transcript(st.session_state.transcription, st.session_state.doc_model_select)
                if medical_doc:
                    st.session_state.medical_doc = medical_doc
                    st.session_state.doc_edited = False
                    st.session_state.generate_doc = False
                    st.rerun()
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
                    st.session_state.generate_doc = False

# Display and edit medical documentation
if st.session_state.medical_doc:
    st.header("4. –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    st.markdown("*–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:*")
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edited_doc = st.text_area(
        "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
        st.session_state.medical_doc,
        height=400,
        key="medical_doc_editor"
    )
    
    if edited_doc != st.session_state.medical_doc:
        st.session_state.medical_doc = edited_doc
        st.session_state.doc_edited = True
    
    # Model selection and recommendation generation
    st.header("5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ –ª–∏—à–Ω–∏—Ö HTML-–≤—Å—Ç–∞–≤–æ–∫
    rec_gen_model = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
        options=list(available_models.keys()),
        key="rec_model_select"
    )
    st.button("üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", 
            key="generate_rec_button",
            on_click=set_generate_rec)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Ñ–ª–∞–≥–µ
    if st.session_state.generate_rec:
        rec_gen_placeholder = st.empty()
        with rec_gen_placeholder.container():
            with st.spinner("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π..."):
                result = analyze_medical_doc(st.session_state.medical_doc, st.session_state.rec_model_select)
                if result:
                    st.session_state.recommendations = result["recommendations"]
                    st.session_state.similar_documents = result["similar_documents"]
                    st.session_state.generate_rec = False
                    st.rerun()
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                    st.session_state.generate_rec = False

# Display and edit recommendations
if st.session_state.recommendations:
    st.header("6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    # Allow editing recommendations with larger field
    edited_recommendations = st.text_area(
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)",
        st.session_state.recommendations,
        height=300,
        key="recommendations_editor"
    )
    
    if edited_recommendations != st.session_state.recommendations:
        st.session_state.recommendations = edited_recommendations
    
    # Display similar cases
    if st.session_state.similar_documents:
        st.header("7. –ü–æ—Ö–æ–∂–∏–µ —Å–ª—É—á–∞–∏")
        for idx, doc in enumerate(st.session_state.similar_documents, 1):
            with st.expander(f"–°–ª—É—á–∞–π {idx} (–°—Ö–æ–∂–µ—Å—Ç—å: {doc['similarity']:.2f})", expanded=False):
                st.markdown(doc['content'])
                if 'metadata' in doc:
                    st.markdown("**–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:**")
                    if doc['metadata'].get('specialty'):
                        st.markdown(f"- –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {doc['metadata']['specialty']}")
                    if doc['metadata'].get('diagnoses'):
                        st.markdown("- –î–∏–∞–≥–Ω–æ–∑—ã: " + ", ".join(doc['metadata']['diagnoses']))
    
    # Document export section
    st.header("8. –≠–∫—Å–ø–æ—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    
    # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
    st.markdown("""
    ### –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:
    - **DOCX** - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Microsoft Word
    - **PDF** - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞ –ª—é–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    - **Markdown** - —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
    """)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    export_col1, export_col2, export_col3 = st.columns(3)
    
    # –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    docx_filename = f"medical_doc_{timestamp}.docx"
    pdf_filename = f"medical_doc_{timestamp}.pdf"
    md_filename = f"medical_doc_{timestamp}.md"
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Markdown-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
    markdown_content = f"""# –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    
{st.session_state.medical_doc}

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

{st.session_state.recommendations}

# –ü–æ—Ö–æ–∂–∏–µ —Å–ª—É—á–∞–∏
"""
    
    # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ DOCX
    with export_col1:
        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–∞..."):
            docx_bytes = create_docx(st.session_state.medical_doc, st.session_state.recommendations)
            if docx_bytes:
                st.download_button(
                    label="üìÑ –°–∫–∞—á–∞—Ç—å DOCX",
                    data=docx_bytes,
                    file_name=docx_filename,
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    key="download_docx",
                    use_container_width=True
                )
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    
    # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
    with export_col2:
        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞..."):
            pdf_bytes = create_pdf(st.session_state.medical_doc, st.session_state.recommendations)
            if pdf_bytes:
                st.download_button(
                    label="üìä –°–∫–∞—á–∞—Ç—å PDF",
                    data=pdf_bytes,
                    file_name=pdf_filename,
                    mime="application/pdf",
                    key="download_pdf",
                    use_container_width=True
                )
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    
    # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Markdown
    with export_col3:
        st.download_button(
            label="üìù –°–∫–∞—á–∞—Ç—å Markdown",
            data=markdown_content,
            file_name=md_filename,
            mime="text/markdown",
            key="download_md",
            use_container_width=True
        )
