import streamlit as st
import requests
import json
import os
from datetime import datetime
import tempfile
from moviepy import VideoFileClip
from pydub import AudioSegment
import io

# Service URLs from environment variables
MEDICAL_DOC_SERVICE_URL = os.getenv("MEDICAL_DOC_SERVICE_URL", "http://medical-doc-service:8000")
AUDIO_TRANSCRIPTION_SERVICE_URL = os.getenv("AUDIO_TRANSCRIPTION_SERVICE_URL", "http://audio-transcription-service:8004")
LLM_SERVICE_URL = os.getenv("LLM_SERVICE_URL", "http://llm-service:8003")

# Configure the page
st.set_page_config(
    page_title="–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
    page_icon="üè•",
    layout="wide"
)

def get_available_models():
    """Get available LLM models"""
    try:
        response = requests.get(f"{LLM_SERVICE_URL}/available_models")
        if response.status_code == 200:
            return response.json()
    except Exception:
        pass
    return {"gpt-3.5-turbo": True, "gpt-4": True}  # Default models if service unreachable

# Get available LLM models
available_models = get_available_models()


def extract_audio_from_video(video_file):
    """Extract audio from video file"""
    try:
        # Create a temporary file to save the video
        with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_video:
            temp_video.write(video_file.read())
            temp_video_path = temp_video.name

        # Extract audio using moviepy
        video = VideoFileClip(temp_video_path)
        
        # Create a temporary file for the audio
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_audio:
            video.audio.write_audiofile(temp_audio.name)
            audio_segment = AudioSegment.from_wav(temp_audio.name)
            
        # Cleanup temporary files
        os.unlink(temp_video_path)
        os.unlink(temp_audio.name)
        video.close()
        
        return audio_segment
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ: {str(e)}")
        return None

def load_audio_file(audio_file):
    """Load audio file into AudioSegment"""
    try:
        # Read the uploaded file into memory
        audio_bytes = audio_file.read()
        
        # Create a temporary file with the correct extension
        ext = audio_file.name.split('.')[-1].lower()
        with tempfile.NamedTemporaryFile(suffix=f'.{ext}', delete=False) as temp_audio:
            temp_audio.write(audio_bytes)
            audio_segment = AudioSegment.from_file(temp_audio.name, format=ext)
            os.unlink(temp_audio.name)
        return audio_segment
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def combine_audio_segments(audio_segments):
    """Combine multiple audio segments into one"""
    try:
        combined = AudioSegment.empty()
        for segment in audio_segments:
            combined += segment
        return combined
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤: {str(e)}")
        return None

def audio_segment_to_file(audio_segment):
    """Convert AudioSegment to file-like object"""
    try:
        buffer = io.BytesIO()
        audio_segment.export(buffer, format="wav")
        buffer.seek(0)
        return buffer
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
        return None 


# Sidebar for model selection
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
    selected_model = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò",
        options=list(available_models.keys()),
        help="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
    )
    
    st.markdown("""
    **–û –º–æ–¥–µ–ª—è—Ö:**
    - **GPT-4**: –ù–∞–∏–±–æ–ª–µ–µ –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤
    - **GPT-3.5**: –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    """)

def check_services():
    """Check if all required services are available"""
    services_status = {}
    
    # Check audio transcription service
    try:
        response = requests.get(f"{AUDIO_TRANSCRIPTION_SERVICE_URL}/test", timeout=5)
        if response.status_code == 200:
            result = response.json()
            services_status["audio"] = {
                "status": "available",
                "models": result.get("models", {})
            }
        else:
            services_status["audio"] = {"status": "error", "message": response.text}
    except Exception as e:
        services_status["audio"] = {"status": "error", "message": str(e)}
    
    # Check medical doc service
    try:
        response = requests.get(f"{MEDICAL_DOC_SERVICE_URL}/health", timeout=5)
        if response.status_code == 200:
            services_status["medical"] = {"status": "available"}
        else:
            services_status["medical"] = {"status": "error", "message": response.text}
    except Exception as e:
        services_status["medical"] = {"status": "error", "message": str(e)}
    
    return services_status

# Check services status
services_status = check_services()

# Display services status
with st.sidebar:
    st.header("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    # Audio service status
    st.subheader("–°–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
    audio_status = services_status["audio"]
    if audio_status["status"] == "available":
        st.success("‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω")
        if "models" in audio_status:
            st.markdown("**–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:**")
            for model, available in audio_status["models"].items():
                status = "‚úÖ" if available else "‚ùå"
                st.markdown(f"- {model.upper()}: {status}")
    else:
        st.error(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {audio_status.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # Medical service status
    st.subheader("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å")
    medical_status = services_status["medical"]
    if medical_status["status"] == "available":
        st.success("‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω")
    else:
        st.error(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {medical_status.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

def transcribe_audio(audio_file):
    """Transcribe audio file using the transcription service"""
    try:
        files = {"file": (audio_file.name, audio_file, audio_file.type)}
        data = {
            "model_type": "rnnt",  # –∏—Å–ø–æ–ª—å–∑—É–µ–º RNNT –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "long_form": "true"    # –≤–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª–∏–Ω–Ω—ã—Ö –∞—É–¥–∏–æ
        }
        
        st.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {audio_file.name} ({audio_file.type})")
        
        response = requests.post(
            f"{AUDIO_TRANSCRIPTION_SERVICE_URL}/transcribe",
            files=files,
            data=data,
            timeout=300  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∞—É–¥–∏–æ
        )
        
        if response.status_code == 200:
            result = response.json()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
            if "utterances" in result:
                # –î–ª—è –¥–ª–∏–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                return "\n".join([u["transcription"] for u in result["utterances"]])
            elif "transcription" in result:
                # –î–ª—è –æ–±—ã—á–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                return result["transcription"]
            else:
                st.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
                return None
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {response.text}")
            return None
    except requests.exceptions.Timeout:
        st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ê—É–¥–∏–æ—Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º.")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}")
        return None

def process_transcript(text):
    """Process transcript into medical documentation"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        status_container = st.empty()
        
        response = requests.post(
            f"{MEDICAL_DOC_SERVICE_URL}/process_transcript",
            json={
                "transcript": text,
                "model_type": selected_model,
                "parameters": {
                    "temperature": 0.3,
                    "max_tokens": 8000
                }
            },
            stream=True,
            timeout=600  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        )
        
        if response.status_code == 200:
            for line in response.iter_lines():
                if line:
                    data = json.loads(line.decode('utf-8'))
                    status = data.get("status")
                    
                    if status == "completed":
                        status_container.empty()
                        return data.get("structured_doc")
                    elif status == "error":
                        st.error(data.get("message"))
                        return None
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        with status_container:
                            st.info(data.get("message"))
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {str(e)}")
        return None

def analyze_medical_doc(medical_doc):
    """Analyze medical documentation and generate recommendations"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        status_container = st.empty()
        
        response = requests.post(
            f"{MEDICAL_DOC_SERVICE_URL}/analyze",
            json={
                "medical_doc": medical_doc,
                "model_type": selected_model,
                "top_k": 3,
                "parameters": {
                    "temperature": 0.3,
                    "max_tokens": 8000
                }
            },
            stream=True,
            timeout=600  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        )
        
        if response.status_code == 200:
            for line in response.iter_lines():
                if line:
                    data = json.loads(line.decode('utf-8'))
                    status = data.get("status")
                    
                    if status == "completed":
                        status_container.empty()
                        return {
                            "recommendations": data.get("recommendations"),
                            "similar_documents": data.get("similar_documents")
                        }
                    elif status == "error":
                        st.error(data.get("message"))
                        return None
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        with status_container:
                            st.info(data.get("message"))
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
        return None

# Initialize session state
if "transcription" not in st.session_state:
    st.session_state.transcription = None
if "medical_doc" not in st.session_state:
    st.session_state.medical_doc = None
if "recommendations" not in st.session_state:
    st.session_state.recommendations = None
if "similar_documents" not in st.session_state:
    st.session_state.similar_documents = None
if "doc_edited" not in st.session_state:
    st.session_state.doc_edited = False

# Main UI
st.title("üè• –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
st.markdown("""
    1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –ø—Ä–∏–µ–º–∞
    2. –ü–æ–ª—É—á–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    3. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
""")

# File upload section
st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
uploaded_files = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã",
    type=['mp3', 'wav', 'm4a', 'mp4', 'avi', 'mov'],
    accept_multiple_files=True
)

# Process files and generate documentation
if uploaded_files:
    if st.button("üéØ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"):
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤..."):
            # List to store all audio segments
            audio_segments = []
            
            # Process each file
            for file in uploaded_files:
                file_ext = file.name.split('.')[-1].lower()
                
                if file_ext in ['mp4', 'avi', 'mov']:
                    st.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ: {file.name}")
                    audio_segment = extract_audio_from_video(file)
                else:
                    st.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {file.name}")
                    audio_segment = load_audio_file(file)
                
                if audio_segment:
                    audio_segments.append(audio_segment)
                else:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: {file.name}")
                    break
            
            if audio_segments:
                # Combine all audio segments
                st.info("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤...")
                combined_audio = combine_audio_segments(audio_segments)
                
                if combined_audio:
                    # Convert to file-like object for transcription
                    audio_file = audio_segment_to_file(combined_audio)
                    
                    if audio_file:
                        with st.spinner("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ..."):
                            transcription = transcribe_audio(audio_file)
                            if transcription:
                                st.session_state.transcription = transcription
                                
                                with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."):
                                    medical_doc = process_transcript(transcription)
                                    if medical_doc:
                                        st.session_state.medical_doc = medical_doc
                                        st.session_state.doc_edited = False
                                        st.rerun()

# Display and edit transcription
if st.session_state.transcription:
    st.header("2. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è")
    st.text_area(
        "–¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏",
        st.session_state.transcription,
        height=150,
        disabled=True
    )

# Display and edit medical documentation
if st.session_state.medical_doc:
    st.header("3. –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    st.markdown("*–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:*")
    
    edited_doc = st.text_area(
        "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
        st.session_state.medical_doc,
        height=300,
        key="medical_doc_editor"
    )
    
    if edited_doc != st.session_state.medical_doc:
        st.session_state.medical_doc = edited_doc
        st.session_state.doc_edited = True
        st.session_state.recommendations = None  # Clear previous recommendations
        st.session_state.similar_documents = None

    # Generate recommendations button
    if st.button("üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", disabled=False):
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π..."):
            result = analyze_medical_doc(st.session_state.medical_doc)
            if result:
                st.session_state.recommendations = result["recommendations"]
                st.session_state.similar_documents = result["similar_documents"]
                st.rerun()

# Display recommendations and similar cases
if st.session_state.recommendations:
    st.header("4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    st.markdown(st.session_state.recommendations)
    
    if st.session_state.similar_documents:
        st.header("5. –ü–æ—Ö–æ–∂–∏–µ —Å–ª—É—á–∞–∏")
        for idx, doc in enumerate(st.session_state.similar_documents, 1):
            with st.expander(f"–°–ª—É—á–∞–π {idx} (–°—Ö–æ–∂–µ—Å—Ç—å: {doc['similarity']:.2f})", expanded=False):
                st.markdown(doc['content'])
                if 'metadata' in doc:
                    st.markdown("**–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:**")
                    if doc['metadata'].get('specialty'):
                        st.markdown(f"- –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {doc['metadata']['specialty']}")
                    if doc['metadata'].get('diagnoses'):
                        st.markdown("- –î–∏–∞–≥–Ω–æ–∑—ã: " + ", ".join(doc['metadata']['diagnoses']))
    
    # Create download button for complete documentation
    complete_doc = f"""# –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    
{st.session_state.medical_doc}

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

{st.session_state.recommendations}

# –ü–æ—Ö–æ–∂–∏–µ —Å–ª—É—á–∞–∏

"""
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
        data=complete_doc,
        file_name=f"medical_doc_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
        mime="text/markdown"
    )
